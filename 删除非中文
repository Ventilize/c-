

#include <Windows.h> 
#include <winuser.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "graphics.h"
#include "extgraph.h"
#include "imgui.h"

#define CURSOR 1

double winwidth = 10.0, winheight = 10.0;   //窗口尺寸
double len; //记录某一行字符总长度(?)
double CursorHeight;  //光标高度
char alltext[10000] = ""; //记录所有字符
int alltextnum = 0; //记录总字数(?)  打开文件之后似乎要初始化
int textnum; //记录总字符数(遍历)
int everytextnum; //记录每一行字符数量(?)
int linenum; //总行数
int Now_x = 0; //当前行的第x字符;
int Now_y = 0; //当前是第几行
int Cnum; //某一行的汉语字符个数
int Enum; //某一行的非汉语字符个数
bool isFirst = TRUE; //
double InitY = -1;
double distance = 2;
int Max_Num = 10000; //最大字符数

int ClickOrNot = 0; //是否点击
int InputOrNot = 0;//是否输入
int nowflag = 1;
int flag = 1;


/*当前光标位置*/
struct location
{
	double x;
	double y;
}cursorLocation;


//将总字符分在每一行的结构体 
struct everyrow
{
	int LineNum;   //每一行的行号
	char row[10000];   //每一行的字符串
}TextLines[50];//保存每一行的字符串 注意s

//存某一行的字符串,链表
struct  everyline
{
	char TextLine[1000];
	struct stud_node* next;
};
struct everyline* head, * p, * tail;

//按顺序排列
void display();
void CharEventProcess(char ch);
void TimerEventProcess(int timerID);
void Last_location(); //Now_x Now_y 似乎是没有用了?
void drawEditText(); //输出
void convert(); //分装
void counting(); //更新Enum, Cnum
void LastChar(); //分装时处理最后一个字符
void KeyboardEventProcess(int key, int event);
void TurnBack();
void TurnForward();

void ChangeLine();
void moveVertical();

double GetPartStringWidth(char* s, int i); //获取部分字符串长度 
int CountNowNum();
void Delete();
void Delete_E();




void Main()
{
	SetWindowSize(winwidth, winheight);
	InitGraphics();
	//临时
	cursorLocation.x = 0;
	cursorLocation.y = 2;
	SetPointSize(20); //字体大小

	registerKeyboardEvent(KeyboardEventProcess);
	registerTimerEvent(TimerEventProcess);
	registerCharEvent(CharEventProcess);
	startTimer(CURSOR, 500);
	display();
}

void display() //刷新
{


	SetPenColor("Black");
	SetPointSize(20);
	SetFont("宋体");
	CursorHeight = GetFontHeight();
	drawEditText();
}

void CharEventProcess(char ch)
{
	uiGetChar(ch);  //在imgui.c 252行
	InputOrNot = 1;

	if (ch > 0 && ch <= 26) {
		//display();
		//InitConsole();
		//printf("这里%s\n", alltext);
		//FreeConsole();
	}

	/*删除*/
	if (ch == VK_BACK) {
		//InitConsole();
		//printf("This is delete");
		//FreeConsole();
		Delete();
	}

	/*换行*/
	if (ch == VK_RETURN || ch == 10) {
		ChangeLine();
		Now_x = 0; //第0个字符;
		Now_y++;  //当前所在行
		display();
		return;
	}
	if ((ch >= VK_SPACE && ch < 127) || ch < 0)   //空格32, esc 27
	{
		if (ch == VK_ESCAPE) exit(-1); //?把这句话删了就不行了???
		else 
		{

			/*

			if (flag) {
				Last_location();
				flag = 0;

			}
			else {
				int k = CountNowNum();
				char Swap1 = alltext[k];
				char Swap2;
				alltext[k] = ch;
				while (Swap1 != '\0')
				{
					Swap2 = alltext[k + 1];
					alltext[k + 1] = Swap1;
					k++;
					Swap1 = Swap2;
				}
			*/
			int k = CountNowNum();
			char Swap1 = alltext[k];
			char Swap2;
			alltext[k] = ch;
			while (Swap1 != '\0')
			{
				Swap2 = alltext[k + 1];
				alltext[k + 1] = Swap1;
				k++;
				Swap1 = Swap2;
				alltextnum = strlen(alltext);
				display();
				if (strlen(TextLines[Now_y].row) < Now_x)
				{
					Now_x = 0;
					Now_y++;
				}
			}
		}
	}
}




void TimerEventProcess(int timerID)
{
	/*不在输入区，不显示 */
	if (cursorLocation.y < 1)
	{
		return;
	}

	/* 控制光标的显示 */
	static int n = 0;
	if (n % 2 != 0)
	{
		/*控制显示*/
		/*奇数次，不显示*/
		DisplayClear();
		display();
		n++;
	}
	else
	{
		/*获取当前位置 */
		double x = GetCurrentX();
		double y = GetCurrentY();



		/*确定光标:cursorLocation的赋值*/
		moveVertical();

		//InitConsole();
		//printf("%d", Now_x);


		/* 移动坐标*/
		MovePen(cursorLocation.x, winheight - cursorLocation.y + 0.9 * CursorHeight);

		/* 画光标*/
		DrawLine(0, CursorHeight);
		n++;
	}
}

void Last_location()
{
	Now_y = linenum;
	Now_x = strlen(TextLines[Now_y].row);
}

void drawEditText() {
	if (isFirst) {
		InitY = 10 - distance;
		isFirst = FALSE;
	}
	double fH = GetFontHeight();

	//分装
	convert();
	
	//确定输出位置
	int i;
	for (i = 0; i <= linenum; i++) {
		MovePen(0, InitY - fH * i);
		if (GetCurrentY() > 10 - distance) {
			continue;
		}
		//DrawTextString(alltext);
		DrawTextString(TextLines[i].row);
	}

}

/*分装到二维数组*/
void convert() 
{
	/*初始化*/
	{
		linenum = 0;  
		textnum = 0;
		everytextnum = 0;
		len = 0;  //某一行字符长度(图形长度)
		int k;
		for (k = 0; k < 50; k++)
		{
			TextLines[k].row[0] = '\0';   //50行都设置为空
		}
	}

	alltextnum = strlen(alltext);

	while (textnum < alltextnum) //已经转移的字符<总字符
	{
		TextLines[linenum].row[everytextnum] = alltext[textnum];
		textnum++;
		everytextnum++;
		TextLines[linenum].row[everytextnum] = '\0';
		len = TextStringWidth(TextLines[linenum].row);

		//连续换行  
		while (alltext[textnum] == '\n' && len < winwidth - 0.1)
		{
			TextLines[linenum].row[everytextnum] = '\n';
			TextLines[linenum].row[everytextnum + 1] = '\0';
			textnum++;
			len = 0;   //换行后长度为0
			linenum++; //行数+1
			everytextnum = 0; //该行字符数为0 
		}

		//最后一个字符快要接近末尾
		if (len >= winwidth - 0.5)  
		{
			counting();  //更新Enum,Cnum 
			LastChar();
			len = 0;
			linenum++;
			everytextnum = 0;
		}
		//得到linenum,和最后一行的everytextnum(该位置是\0)



	}
}

/*数中文字符和非中文字符*/
void counting() 
{
	Enum = 0;
	Cnum = 0;
	int num = strlen(TextLines[linenum].row); //遍历所有字符
	int i;
	for (i = 0; i < num; i++)
	{
		if (TextLines[linenum].row[i] >= 0 && TextLines[linenum].row[i] <= 127)
		{
			Enum++;
		}
		else
		{
			Cnum++;
		}
	}
}
/*处理最后一个字符*/
void LastChar()
{
	char lastone = TextLines[linenum].row[everytextnum - 1];
	if (lastone >= 0 || Cnum % 2 == 0)   //不是中文
	{
		TextLines[linenum].row[everytextnum] = '\0';
	}
	else
	{
		TextLines[linenum].row[everytextnum - 1] = '\0';
		textnum--;
	}
}

/*键盘事件*/
void KeyboardEventProcess(int key, int event)
{
	uiGetKeyboard(key, event);
	switch (event)
	{
		case KEY_DOWN:
			switch (key)
			{
				case VK_LEFT:
					ClickOrNot = 1;
					TurnBack();
					break;
				case VK_RIGHT:
					ClickOrNot = 1;
					TurnForward();
					break;
				case VK_UP:
					ClickOrNot = 1;
					//TurnUp();
					break;
				case VK_DOWN:
					ClickOrNot = 1;
					//TurnDown();
					break;
			}
	}
}

/*键盘<-*/
void TurnBack() 
{
	/*最左边的处理*/
	if ((Now_x == 1) && (TextLines[Now_y].row[Now_x - 1] > 0) ) {
		Now_x = 0;
		return;
	}
	if ((Now_x == 2) && (TextLines[Now_y].row[Now_x - 1] < 0)) {
		Now_x = 0;
		return;
	}

	if (TextLines[Now_y].row[Now_x - 1] > 0)
	{
		Now_x--;
	}
	else
	{
		//InitConsole();
		//printf("所有:%s", alltext);
		//printf("%d,是汉字\n", TextLines[Now_y].row[Now_x - 1]);
		//printf("%d\n", Now_x);
		Now_x -= 2;
		//printf("%d\n", Now_x);
	}
	//moveVertical();

}

/*键盘->*/
void TurnForward()
{
	int len = strlen(TextLines[Now_y].row);
	if (Now_x < len) {
		if (TextLines[Now_y].row[Now_x] > 0)
		{
			Now_x++;
		}
		else
		{
			Now_x = Now_x + 2;
		}
		//cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
	}
	else
	{
		return;
	}
}

/*Enter可换行*/
void ChangeLine() {
	/*算法和文中插入一样,只不过在charEventProcess里面分开处理,所以多一个算法类似的函数*/
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++) {
		sum = sum + strlen(TextLines[i].row);
	}
	sum = sum + Now_x;
	char Swap1 = alltext[sum];
	char Swap2;
	alltext[sum] = '\n';
	while (Swap1 != '\0')
	{
		Swap2 = alltext[sum + 1];
		alltext[sum + 1] = Swap1;
		sum++;
		Swap1 = Swap2;
	}
	alltextnum = strlen(alltext);
}


/*移动光标, 根据Now_y,Now_x*/
void moveVertical()
{
	//注意y是从上往下数的
	cursorLocation.y = distance + (Now_y+1) * GetFontHeight();
	if (Now_x == 0) {
		cursorLocation.x = 0;
	}
	else {
		cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
	}
	
}


/* 获取部分字符串长度 */
double GetPartStringWidth(char* s, int i)
{
	/*获取到部分字符串 */
	char temp[100];
	strcpy(temp, s);
	temp[i + 1] = '\0';

	/* 返回长度*/
	return TextStringWidth(temp);
}

/*通过坐标来找到当前字符在总体字符串的具体位置*/
int CountNowNum()
{
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++)
	{
		sum = sum + strlen(TextLines[i].row);
	}
	sum = sum + Now_x;
	Now_x++;
	return sum;
}

void Delete()
{
	/*没有字符可删除，直接返回*/
	if (Now_x == 0 && Now_y == 0)
	{
		return;
	}

	/*换行符的删除*/
	if (Now_x == 0 && TextLines[Now_y - 1].row[strlen(TextLines[Now_y - 1].row) - 1] == '\n')
	{
		//Delete_break();
	}
	/*非中文的删除*/
	else if (Now_x - 1 < 0 || TextLines[Now_y].row[Now_x - 1] >= 1 && TextLines[Now_y].row[Now_x - 1] <= 127)
	{
		Delete_E();
	}
	/*中文的删除*/
	else
	{
		//Delete_C();
	}
}

/*非中文删除*/
void Delete_E() 
{
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++)
	{
		sum = sum + strlen(TextLines[i].row);
	}
	/*重新计算sum*/
	if (Now_x == 0 && Now_y != 0)
	{
		Now_y--;
		sum = 0;
		for (i = 0; i < Now_y; i++)
		{
			sum = sum + strlen(TextLines[i].row);
		}
		Now_x = strlen(TextLines[Now_y].row);
	}
	Now_x--;
	sum = sum + Now_x;
	while (alltext[sum] != '\0')
	{
		alltext[sum] = alltext[sum + 1];
		sum++;
	}
}
