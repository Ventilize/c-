#include <Windows.h>
#include <winuser.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "graphics.h"
#include "extgraph.h"
#include "imgui.h"


int Partfillflag = 0;
int backcolor;
int pensize ;
int pencolor;
int typestyle;
char* typeface;
int searchtime = 0; //?
char replacetext[100] = ""; //删
char PartString[50];//?


double lineSpacing = 0; //要删!
char find[100]; //要删!

int textnum = 0;//总字符数 
int linenum = 0;//总行数 
int everytextnum = 0;//记录每一行字符数量的中间变量 
int alltextnum = 0;//记录总字数 
int Now_x = 0;  
int Now_y = 0;
int Enum = 0;
int Cnum = 0;
int ClickOrNot = 0;
int InputOrNot = 0;
int fillflag = 0;
bool MENU = FALSE;
double len;//记录某一行的字符总长度 
double distance = 2;
double winwidth = 10, winheight = 10;   // 窗口尺寸
double CursorHeight = 0;
char copystring[10000];
char alltext[10000] = "";//记录所有字符 
char everyhang[10000];
int Max_Num = 10000; //最大字符数
double InitY = -1;

int isfirst = 1;
int beforeX = 0;
int beforeY = 0;
double beforeLocaitonX = -1;
double beforeLocaitony = -1;
double roll = 0;

struct location
{
	double x;
	double y;
}cursorLocation;  //鼠标点击的位置

//删
 struct Region
{
	int startX;
	int endX;
	int startY;
	int endY;
}region;

struct everyrow
{
	int LineNum;
	char row[10000];
}TextLines[50];

 struct  everyline {
	char TextLine[1000];
	struct stud_node* next;
};
 struct everyline* head, * p, * tail;

//删
struct Area
{
	double start_x;
	double end_x;
	double start_y;
	double end_y;
	int last_x;
	int last_y;
	int Now_x;
	int Now_y;
}area;

//删
extern struct search_location
{
	int x;
	int y;
	int num;
	double start_x;
	double end_x;
	double start_y;
	double end_y;
}s_location[10];


//以下为新增函数
void write_display();
void display(); //对应display()?

/* 字符串处理器*/
void CharEventProcess(char ch);

/* 换行*/
void ChangeLine();

/*计数当前字符的位置*/
int CountNowNum();

/*换行符删除*/
void Delete_3();

/*非中文删除*/
void Delete_1(void);

/*中文删除*/
void Delete_2();

/* 删除总函数*/
void Delete(void);

/* 将整体的字符串转换为分行显示的结构组*/
void convert(void);

/*每一行最后一个字符的特殊处理*/
void LastChar(void);

/*计数某一行中的中文字符和非中文字符的总数*/
void counting(void);

/*每一次读入字符串前，进行初始设置*/
void reset(void);

/*交换相对位置*/
//void ChangeTurn();

/*显示字符串*/
void drawEditText();

/*键盘回调函数，获得指令*/
void KeyboardEventProcess(int key, int event);

/*键盘左键，令光标和相对位置向左移动一个单位*/
void TurnBack();

/*键盘右键，令光标和相对位置向右移动一个单位*/
void TurnForward();

/*键盘上键，令光标和相对位置向上移动一个单位*/
void TurnUp();

/*键盘下键，令光标和相对位置向下移动一个单位*/
void TurnDown();
/*鼠标回调*/
void MouseEventProcess(int x, int y, int button, int event);

/*x方向的定位*/
int Location_x(double x, double y, char buffer[]);

/*y方向的定位*/
int Location_y(double x, double y, int height);


void Get_location();

/*获取部分字符串的长度*/
double GetPartStringWidth(char* s, int i);


void ChangeLocation();


/*递归获取y方向的具体字符*/
int LocateY(double y, double font_h, int i);
# define CURSOR 1
/*建立光标闪烁定时器*/
void TimerEventProcess(int timerID);

void AllDelete();
void Create_List();




void Main() {
	SetWindowSize(10, 10);
	InitGraphics();
	
	write_display();
}



/*这就是点击新建笔记之后需要的文字编辑函数*/
void write_display() 
{
	/*初始化光标位置*/
	cursorLocation.x = 0;
	cursorLocation.y = GetFontHeight() + distance;

	/*注册回调函数 */
	registerCharEvent(CharEventProcess);
	registerKeyboardEvent(KeyboardEventProcess);
	registerMouseEvent(MouseEventProcess);
	registerTimerEvent(TimerEventProcess);

	display();//刷新
}


/*字符输入*/
void CharEventProcess(char ch)
{
	SetFont("宋体");
	SetPointSize(15);
	uiGetChar(ch);
	InputOrNot = 1;
	//调整获取到的字体大小 

	/*删除环节*/
	if (ch == VK_BACK)
	{
		//###
		/*如果有覆盖，删除所有选中的字符串*/
		if (fillflag == 1)
		{
			fillflag = 0;
			Partfillflag = 0;
			display();
			AllDelete();
			display();
			cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
			cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance + roll - lineSpacing;
			fillflag = 0;
			return;
		}
		/*没有覆盖，只删除对应的一个汉字或其他字符*/
		else
		{
			Partfillflag = 0;
			Delete();
			display();
			cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
			cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance + roll - lineSpacing;
		}
		return;
	}
	/*换行操作*/
	if (ch == VK_RETURN || ch == 10)
	{
		ChangeLine();
		Now_x = 0;
		Now_y++;
		display();
		cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
		cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance + roll - lineSpacing;
		return;
	}
	/*整车读入字符串*/
	else if (ch > 0 && ch <= 26)
	{
		display();
		printf("%s\n", alltext);
		return;
	}
	else
	{
		int k = CountNowNum();
		char Swap1 = alltext[k];
		char Swap2;
		alltext[k] = ch;
		while (Swap1 != '\0')
		{
			Swap2 = alltext[k + 1];
			alltext[k + 1] = Swap1;
			k++;
			Swap1 = Swap2;
		}
		alltextnum = strlen(alltext);
		display();
		if (strlen(TextLines[Now_y].row) < Now_x)
		{
			Now_x = 1;
			Now_y++;
		}
		cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
		cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance + roll - lineSpacing;
	}
}

/*进行换行操作*/
void ChangeLine()
{
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++) {
		sum = sum + strlen(TextLines[i].row);
	}
	sum = sum + Now_x;
	char Swap1 = alltext[sum];
	char Swap2;
	alltext[sum] = '\n';
	while (Swap1 != '\0')
	{
		Swap2 = alltext[sum + 1];
		alltext[sum + 1] = Swap1;
		sum++;
		Swap1 = Swap2;
	}
	alltextnum = strlen(alltext);
}

/*通过坐标来找到当前字符在总体字符串的具体位置*/
int CountNowNum()
{
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++)
	{
		sum = sum + strlen(TextLines[i].row);
	}
	sum = sum + Now_x;
	Now_x++;
	return sum;
}

/*删除操作*/
void Delete(void)
{
	/*没有字符可删除，直接返回*/
	if (Now_x == 0 && Now_y == 0)
	{
		return;
	}
	/*如果是换行符，进行对应的删除*/
	if (Now_x == 0 && TextLines[Now_y - 1].row[strlen(TextLines[Now_y - 1].row) - 1] == '\n')
	{
		Delete_3();
	}
	/*如果是非中文，进行对应的删除*/
	else if (Now_x - 1 < 0 || TextLines[Now_y].row[Now_x - 1] >= 1 && TextLines[Now_y].row[Now_x - 1] <= 127)
	{
		Delete_1();
	}
	/*如果是中文，进行对应的删除*/
	else
	{
		Delete_2();
	}
}

/*非中文删除*/
void Delete_1(void) {
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++)
	{
		sum = sum + strlen(TextLines[i].row);
	}
	if (Now_x == 0 && Now_y != 0)
	{
		Now_y--;
		sum = 0;
		for (i = 0; i < Now_y; i++)
		{
			sum = sum + strlen(TextLines[i].row);
		}
		Now_x = strlen(TextLines[Now_y].row);
	}
	Now_x--;
	sum = sum + Now_x;
	while (alltext[sum] != '\0')
	{
		alltext[sum] = alltext[sum + 1];
		sum++;
	}
}

/*中文删除*/
void Delete_2() {
	int sum = 0;
	int i;
	for (i = 0; i < Now_y; i++)
	{
		sum = sum + strlen(TextLines[i].row);
	}
	if (Now_x == 0 && Now_y != 0)
	{
		Now_y--;
		sum = 0;
		for (i = 0; i < Now_y; i++)
		{
			sum = sum + strlen(TextLines[i].row);
		}
		Now_x = strlen(TextLines[Now_y].row);
	}
	Now_x--;
	sum = sum + Now_x;
	Now_x--;
	sum--;
	while (alltext[sum] != '\0')
	{
		alltext[sum] = alltext[sum + 2];
		sum++;
	}
	alltext[sum] = '\0';
}

/*换行删除*/
void Delete_3()
{
	int i;
	int sum = 0;
	Now_y--;
	for (i = 0; i < Now_y; i++)
	{
		sum = sum + strlen(TextLines[i].row);
	}
	Now_x = strlen(TextLines[Now_y].row);
	Now_x--;
	sum = sum + Now_x;
	while (alltext[sum] != '\0')
	{
		alltext[sum] = alltext[sum + 1];
		sum++;
	}
	alltext[sum] = '\0';
}

/*将总字符分装在每一行中*/
void convert(void)
{
	reset();
	alltextnum = strlen(alltext);//字符总数 

	if (alltextnum > Max_Num - 50)
	{
		Max_Num += 100;
		char* p = (char*)malloc(sizeof(char) * Max_Num);
		for (int i = 0; i < alltextnum; i++)
		{
			p[i] = alltext[i];
		}
		strcpy(alltext, p);
		free(p);
	}


	while (textnum < alltextnum)
	{
		TextLines[linenum].row[everytextnum] = alltext[textnum];
		textnum++;
		everytextnum++;
		TextLines[linenum].row[everytextnum] = '\0';
		len = TextStringWidth(TextLines[linenum].row);
		while (alltext[textnum] == '\n' && len < winwidth - 0.1)
		{
			TextLines[linenum].row[everytextnum] = '\n';
			TextLines[linenum].row[everytextnum + 1] = '\0';
			textnum++;
			len = 0;
			linenum++;
			everytextnum = 0;
		}
		if (len >= winwidth - 0.5)
		{
			counting();
			LastChar();
			len = 0;
			linenum++;
			everytextnum = 0;
		}
	}
}

/*处理每一行的最后一个字符*/
void LastChar(void)
{
	char lastone = TextLines[linenum].row[everytextnum - 1];
	if (lastone >= 0 || Cnum % 2 == 0)
	{
		TextLines[linenum].row[everytextnum] = '\0';
	}
	else
	{
		TextLines[linenum].row[everytextnum - 1] = '\0';
		textnum--;
	}
}

/*计数每一行的中文和英文的字符个数*/
void counting(void)
{
	Enum = 0;
	Cnum = 0;
	int num = strlen(TextLines[linenum].row);
	int i;
	for (i = 0; i < num; i++)
	{
		if (TextLines[linenum].row[i] >= 0 && TextLines[linenum].row[i] <= 127)
		{
			Enum++;
		}
		else
		{
			Cnum++;
		}
	}
}

/*每一次将总字符划分在每一行中的初始化 */
void reset(void)
{
	linenum = 0;
	textnum = 0;
	everytextnum = 0;
	len = 0;
	int k;
	for (k = 0; k < 50; k++)
	{
		TextLines[k].row[0] = '\0';
	}
}

/*将字符串按行输出*/
void drawEditText()
{
	if (isfirst)
	{
		InitY = 10 - distance;
		//printf("InitY!:%d\n", InitY);
		isfirst = FALSE;
	}
	double fH = GetFontHeight();
	int i;
	struct everyline* p;
	convert();
	Create_List();
	p = head;
	for (i = 0; i <= linenum; i++)
	{
		MovePen(0, InitY - fH * i - i * lineSpacing);
		if (GetCurrentY() > 7 - distance)
		{
			continue;
		}
		DrawTextString(TextLines[i].row);
	}
}

//void ChangeTurn();
/*鼠标往前往后的的覆盖*/
/*
void ChangeTurn()
{
	double k;
	if (area.end_y < area.start_y)
	{
		k = area.end_y;
		area.end_y = area.start_y;
		area.start_y = k;
		k = area.end_x;
		area.end_x = area.start_x;
		area.start_x = k;
	}
	else if (area.end_y == area.start_y)
	{
		if (area.end_x < area.start_x)
		{
			k = area.end_x;
			area.end_x = area.start_x;
			area.start_x = k;
		}
	}
}

*/

//###
/*选中整体删除*/
void Delete_plus()
{
	if (Now_x == 0 && TextLines[Now_y - 1].row[strlen(TextLines[Now_y - 1].row) - 1] == '\n')
	{
		Delete_3();
	}
	else
	{
		Delete_1();
	}
}

//###
/*选中全部删除*/
void AllDelete()
{
	int len = 0;
	int k = 0;
	Now_x = area.last_x;
	Now_y = area.last_y;
	int i;
	for (i = 0; i < Now_y; i++)
	{
		k = k + strlen(TextLines[i].row);
	}
	k = k + Now_x;
	Now_x = area.Now_x;
	Now_y = area.Now_y;
	for (i = 0; i < Now_y; i++)
	{
		len = len + strlen(TextLines[i].row);
	}
	len = len + Now_x;
	for (i = 0; i < len - k; i++)
	{
		Delete_plus();
	}
}

/*创建链表*/
void Create_List()
{
	int i = 0;
	int size = sizeof(struct everyline);
	head = (struct everyhang*)malloc(size);
	strcpy(head->TextLine, TextLines[i].row);
	i++;
	head->next = NULL;
	tail = head;
	while (i <= linenum)
	{
		p = (struct everyline*)malloc(size);
		strcpy(p->TextLine, TextLines[i].row);
		p->next = NULL;
		tail->next = p;
		tail = p;
		i++;
	}
}



/*键盘*/
void KeyboardEventProcess(int key, int event)
{
	uiGetKeyboard(key, event);
	switch (event) {
	case KEY_DOWN:
		switch (key)
		{
		case VK_LEFT:
			ClickOrNot = 1;
			TurnBack();
			break;
		case VK_RIGHT:
			ClickOrNot = 1;
			TurnForward();
			break;
		case VK_UP:
			ClickOrNot = 1;
			TurnUp();
			break;
		case VK_DOWN:
			ClickOrNot = 1;
			TurnDown();
			break;
		}
	}
}


/* 光标左移 */
void TurnBack()
{
	if (Now_x == 1 || Now_x == 2)
	{
		Now_x = 0;
		cursorLocation.x = 0;
		return;
	}
	if (TextLines[Now_y].row[Now_x - 1] > 0)
	{
		Now_x--;
	}
	else
	{
		Now_x -= 2;
	}
	cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
}

/* 光标向右*/
void TurnForward()
{
	int len = strlen(TextLines[Now_y].row);
	if (Now_x < len) {
		if (TextLines[Now_y].row[Now_x] > 0)
		{
			Now_x++;
		}
		else
		{
			Now_x = Now_x + 2;
		}
		cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
	}
	else
	{
		return;
	}
}

/* 光标向上*/
void TurnUp()
{
	double stringwidth;
	char nowstring[1000];
	char laststring[1000];
	double len = 0;
	int i;
	if (Now_y == 0)
	{
		return;
	}
	else
	{
		for (i = 0; i < Now_x; i++)
		{
			nowstring[i] = TextLines[Now_y].row[i];
		}
		nowstring[i] = '\0';
		i = 0;
		Now_y--;
		stringwidth = TextStringWidth(nowstring);
		while (len < stringwidth && TextLines[Now_y].row[i] != '\0')
		{
			if (TextLines[Now_y].row[i] > 0)
			{
				laststring[i] = TextLines[Now_y].row[i];
				i++;
				laststring[i] = '\0';
			}
			else
			{
				laststring[i] = TextLines[Now_y].row[i];
				i++;
				laststring[i] = TextLines[Now_y].row[i];
				i++;
				laststring[i] = '\0';
			}
			len = TextStringWidth(laststring);
		}
		Now_x = i;
		if (TextLines[Now_y].row[Now_x - 1] == '\n')
		{
			Now_x--;
		}
		cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
		cursorLocation.y = GetFontHeight() * (Now_y + 1) + distance;
	}
}


/* 光标下移*/
void TurnDown()
{
	double stringwidth;
	char nowstring[1000];
	char laststring[1000];
	double len = 0;
	int i;
	if (Now_y == linenum)
	{
		return;
	}
	else
	{
		for (i = 0; i < Now_x; i++)
		{
			nowstring[i] = TextLines[Now_y].row[i];
		}
		nowstring[i] = '\0';
		i = 0;
		Now_y++;
		stringwidth = TextStringWidth(nowstring);
		while (len < stringwidth && TextLines[Now_y].row[i] != '\0')
		{
			if (TextLines[Now_y].row[i] > 0)
			{
				laststring[i] = TextLines[Now_y].row[i];
				i++;
				laststring[i] = '\0';
			}
			else
			{
				laststring[i] = TextLines[Now_y].row[i];
				i++;
				laststring[i] = TextLines[Now_y].row[i];
				i++;
				laststring[i] = '\0';
			}
			len = TextStringWidth(laststring);
		}
		Now_x = i;
		if (TextLines[Now_y].row[Now_x - 1] == '\n')
		{
			Now_x--;
		}
		cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
		cursorLocation.y = GetFontHeight() * (Now_y + 1) + distance;
	}
}



/* 鼠标回调函数，进行定位相关操作 */
void MouseEventProcess(int x, int y, int button, int event)
{
	/*	由于该函数里获取到的字体不是最新字体，更新字体为当前字体 */
	SetFont("宋体");

	/*	获取鼠标位置，与simgui结合*/
	uiGetMouse(x, y, button, event);

	/*	提高刷新率 */
	display();  //注意这里必须修改

	/*  当鼠标位置在输入去之外的时候，不进行定位*/
	if ((ScaleXInches(y) - roll) < 4 * 0.3125)
	{
		return;
	}
	/*	printf("Y: %lf\n", ScaleXInches(y));*/
	switch (event) {
	case BUTTON_DOWN:
		if (button == LEFT_BUTTON)
		{
			/*获取到鼠标已经点击了*/
			ClickOrNot = 1;
			/*控制填充*/
			fillflag = 0;

			/*定位现在在第几行的第几个字符 */
			Now_y = Location_y(ScaleXInches(x), ScaleXInches(y) - roll, linenum);
			Now_x = Location_x(ScaleXInches(x), ScaleXInches(y), TextLines[Now_y].row);

			/*定位鼠标位置 */
			cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x);
			cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance - roll - lineSpacing;

			/*更新填充的位置 */
			area.start_x = cursorLocation.x;
			area.start_y = cursorLocation.y;

			/*修复定位X的bug */
			Now_x++;

			/*更新填充的末尾 */
			area.last_x = Now_x;
			area.last_y = Now_y;



			/*选中区域开始和结束字符位置 */
			region.startX = Now_x;
			region.startY = Now_y;
			break;
		}

	case BUTTON_UP:
		if (button == LEFT_BUTTON)
		{
			/* 更新填充判断*/
			fillflag = 1;
			/* 如果显示超出输入区域，不显示*/
			if ((ScaleXInches(y) - roll) < GetFontHeight() * 1.5)
			{
				break;
			}

			/* 更新定位*/
			Now_y = Location_y(ScaleXInches(x), ScaleXInches(y) - roll, linenum);
			Now_x = Location_x(ScaleXInches(x), ScaleXInches(y), TextLines[Now_y].row);


			/*更新光标位置*/
			cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x);


			cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance - roll - lineSpacing;


			/*更新填充位置 */
			area.end_x = cursorLocation.x;
			area.end_y = cursorLocation.y;

			/* 修复Bug*/
			Now_x++;

			/* 覆盖区域的位置*/
			area.Now_x = Now_x;
			area.Now_y = Now_y;


			/* 更新选中区域的位置*/
			region.endX = Now_x;
			region.endY = Now_y;

			/* 判断是否覆盖区域*/
			if (region.startX == region.endX && region.startY == region.endY)
			{

				fillflag = 0;
				Partfillflag = 0;
			}

			/* 交互覆盖次序*/
			ChangeLocation();
		}
		break;

	case ROLL_DOWN:

		/*获取显示字体的初始坐标值 */
		InitY += GetFontHeight();
		fillflag = 0;
		Partfillflag = 0;
		/* 更新光标的纵坐标*/
		cursorLocation.y -= GetFontHeight();

		//printf("cursorY:%f\n",  cursorLocation.y);

	/* 鼠标滑动之后整体坐标的偏移值*/
		roll -= GetFontHeight();
		display();
		break;


	case ROLL_UP:

		/* InitY偏移多少修改多少*/
		if (InitY > 7 - distance)
		{
			InitY -= GetFontHeight();
			cursorLocation.y += GetFontHeight();
			roll += GetFontHeight();
		}
		fillflag = 0;
		Partfillflag = 0;
		display();
		break;
	}
}

int Location_x(double x, double y, char buffer[])
{
	SetPointSize(15);
	int i = 0;
	double offset = 0;

	/* 用于作为测试汉字长度的字符串*/
	char temp_1[2] = { 0 };
	char temp_2[3] = { 0 };// 汉字两个当一个输出

	/* 判断是不是定位到中间*/
	bool half = FALSE;

	/* 当到字符末尾或者部分字符长度超越offset的时候，停止循环*/
	while (x > offset && buffer[i] != 0)
	{
		/* 英文*/
		if (buffer[i] > 0)
		{
			temp_1[0] = buffer[i];
			offset += TextStringWidth(temp_1);
			i++;
		}
		/*中文 */
		else if (buffer[i] < 0)
		{
			temp_2[0] = buffer[i];
			i++;
			temp_2[1] = buffer[i];
			i++;
			/*判断是否超过当前坐标 */
			if ((offset + 0.5 * TextStringWidth(temp_2)) > x)
			{
				half = TRUE;
				break;
			}
			/* 增加偏移量*/
			offset += TextStringWidth(temp_2);
		}
	}

	/*光标所指的字符默认为-1 */
	int cursor = -1;

	/*如果点到中间偏左 */
	if (half)
	{
		cursorLocation.x = offset;
		cursor = i - 3;
	}
	else
	{
		cursor = i - 1; /* x < offset */

		/* 偏移量大于鼠标坐标*/
		if (x <= offset)
		{

			cursorLocation.x = offset;
		}
		else
		{
			/* 偏移量小于鼠标坐标 */
			cursorLocation.x = GetCurrentX();
			if (buffer[strlen(buffer) - 1] == '\n')
			{
				cursor--;
			}
		}
	}

	/*返回光标的位置 */
	return cursor;
}


/* 定位y */
int Location_y(double x, double y, int height)
{
		SetPointSize(15);

	/*考虑行间距之后“虚拟”字的高度 */
	double font_h = GetFontHeight() + lineSpacing;
	y = y - distance;
	if (y > height * font_h) {
		cursorLocation.y = GetCurrentY() - distance;
		return height;
	}

	int i = LocateY(y, font_h, 0);

	cursorLocation.y = i * font_h - distance + roll;
	return i;
}

/* 递归获取到鼠标所指向的字符 */
int LocateY(double y, double font_h, int i)
{
	if (y <= i * font_h)
		return i;
	else
	{
		LocateY(y, font_h, i + 1);
	}
}


void Get_location()
{
	Now_y = linenum;
	Now_x = strlen(TextLines[Now_y].row);
}




/*交换前后定位光标位置*/
void ChangeLocation()
{
	int k;
	/*如果后定位的在前，进行顺序交换*/
	if (region.startY > region.endY)
	{
		k = region.startY;
		region.startY = region.endY;
		region.endY = k;

		k = region.startX;
		region.startX = region.endX;
		region.endX = k;

		k = area.last_y;
		area.last_y = area.Now_y;
		area.Now_y = k;

		k = area.last_x;
		area.last_x = area.Now_x;
		area.Now_x = k;
	}
	/*如果在同一行，后定位的X在前，进行交换*/
	if (region.startY == region.endY)
	{
		if (region.startX > region.endX)
		{
			k = region.startX;
			region.startX = region.endX;
			region.endX = k;


			k = area.last_x;
			area.last_x = area.Now_x;
			area.Now_x = k;
		}
	}
	/*位置调整*/
	Now_x = region.endX;
	Now_y = region.endY;
	cursorLocation.x = GetPartStringWidth(TextLines[Now_y].row, Now_x - 1);
	cursorLocation.y = (GetFontHeight() + lineSpacing) * (Now_y + 1) + distance + roll - lineSpacing;
}



void TimerEventProcess(int timerID)
{
	/*不在输入区，不显示 */
	if (cursorLocation.y < 0.3125 * 4)
	{
		return;
	}

	/* 控制光标的显示 */
	static int n = 0;
	if (n % 2 != 0)
	{
		/*控制显示*/
		/*奇数次，不显示*/
		DisplayClear();
		display();   //后期注意!!!!
		n++;
	}
	else
	{
		/*获取当前位置 */
		double x = GetCurrentX();
		double y = GetCurrentY();

		/* 移动坐标*/
		MovePen(cursorLocation.x, winheight - cursorLocation.y + 0.9 * CursorHeight);

		/* 画光标*/
		DrawLine(0, CursorHeight);
		n++;
	}
}

void display()  //刷新
{
	DisplayClear();  
	//DrawMeuu();  //注意这里需要结合UI


	/* 调整字体颜色 */
	SetPenColor("Black");
	/* 调整字体大小 */
	SetPointSize(15);
	/*获取字体高度 */
	CursorHeight = GetFontHeight();
	/* 显示字符串*/
	drawEditText();

	//DrawMenu();  //注意这里需要结合UI

}

/* 获取部分字符串长度 */
double GetPartStringWidth(char* s, int i)
{
	/*更新字体大小 */
	if (pensize != 0)
	{
		SetPointSize(pensize);
	}
	else
	{
		SetPointSize(15);
	}

	/*调整字体*/
	SetFont(typeface);

	/*获取到部分字符串 */
	char temp[100];
	strcpy(temp, s);
	temp[i + 1] = '\0';

	/* 返回长度*/
	return TextStringWidth(temp);
}

